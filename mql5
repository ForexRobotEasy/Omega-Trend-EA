mql5
//+------------------------------------------------------------------+
//|                                                     Omega Trend EA|
//|                                 Developer: Forex Robot Easy Team |
//|                                 Website: forexroboteasy.com      |
//+------------------------------------------------------------------+

// Define input parameters
input int StopLoss = 100; // Stop loss in points
input int TakeProfit = 200; // Take profit in points
input double RiskPercentage = 2.0; // Risk percentage per trade
input int TrailingStop = 50; // Trailing stop in points

// Define global variables
double AccountBalance; // Account balance
double PositionSize; // Position size

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    AccountBalance = AccountInfoDouble(ACCOUNT_BALANCE);
    PositionSize = CalculatePositionSize(AccountBalance, RiskPercentage);

    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    // Get current market data
    double currentPrice = SymbolInfoDouble(Symbol(), SYMBOL_BID);

    // Trend analysis and trading decisions
    if (IsUptrend(currentPrice))
    {
        if (!PositionExists())
        {
            // Open a buy position with predefined criteria
            double stopLossPrice = currentPrice - StopLoss * _Point;
            double takeProfitPrice = currentPrice + TakeProfit * _Point;
            OpenBuyPosition(stopLossPrice, takeProfitPrice);
        }
    }
    else if (IsDowntrend(currentPrice))
    {
        if (!PositionExists())
        {
            // Open a sell position with predefined criteria
            double stopLossPrice = currentPrice + StopLoss * _Point;
            double takeProfitPrice = currentPrice - TakeProfit * _Point;
            OpenSellPosition(stopLossPrice, takeProfitPrice);
        }
    }
}

//+------------------------------------------------------------------+
//| Function to check if an uptrend is present                       |
//+------------------------------------------------------------------+
bool IsUptrend(double price)
{
    // Implement trend spotting mechanism
    // Check for macro and micro trends based on historical data

    return (price > iMA(NULL, 0, 50, 0, MODE_EMA, PRICE_CLOSE, 0));
}

//+------------------------------------------------------------------+
//| Function to check if a downtrend is present                      |
//+------------------------------------------------------------------+
bool IsDowntrend(double price)
{
    // Implement trend spotting mechanism
    // Check for macro and micro trends based on historical data

    return (price < iMA(NULL, 0, 50, 0, MODE_EMA, PRICE_CLOSE, 0));
}

//+------------------------------------------------------------------+
//| Function to open a buy position                                   |
//+------------------------------------------------------------------+
void OpenBuyPosition(double stopLoss, double takeProfit)
{
    // Place buy order with stop loss and take profit levels
    int ticket = OrderSend(Symbol(), OP_BUY, PositionSize, SymbolInfoDouble(Symbol(), SYMBOL_ASK), 2, stopLoss, takeProfit, 'Buy Order', 0, 0, Green);

    if (ticket > 0)
    {
        // Order executed successfully
        Print('Buy order placed at ', SymbolInfoDouble(Symbol(), SYMBOL_ASK));
    }
}

//+------------------------------------------------------------------+
//| Function to open a sell position                                  |
//+------------------------------------------------------------------+
void OpenSellPosition(double stopLoss, double takeProfit)
{
    // Place sell order with stop loss and take profit levels
    int ticket = OrderSend(Symbol(), OP_SELL, PositionSize, SymbolInfoDouble(Symbol(), SYMBOL_BID), 2, stopLoss, takeProfit, 'Sell Order', 0, 0, Red);

    if (ticket > 0)
    {
        // Order executed successfully
        Print('Sell order placed at ', SymbolInfoDouble(Symbol(), SYMBOL_BID));
    }
}

//+------------------------------------------------------------------+
//| Function to calculate position size based on risk tolerance       |
//+------------------------------------------------------------------+
double CalculatePositionSize(double accountBalance, double riskPercentage)
{
    // Calculate position size based on risk tolerance
    double riskAmount = accountBalance * riskPercentage / 100;
    double positionSize = riskAmount / StopLoss;

    return positionSize;
}

//+------------------------------------------------------------------+
//| Function to check if a position is already open                   |
//+------------------------------------------------------------------+
bool PositionExists()
{
    // Check if any open positions exist
    for (int i = 0; i < OrdersTotal(); i++)
    {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            if (OrderSymbol() == Symbol() && (OrderType() == OP_BUY || OrderType() == OP_SELL))
            {
                return true;
            }
        }
    }

    return false;
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    // Close any open positions before deinitializing
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
            if (OrderSymbol() == Symbol() && (OrderType() == OP_BUY || OrderType() == OP_SELL))
            {
                OrderClose(OrderTicket(), OrderLots(), OrderClosePrice(), 2, Red);
            }
        }
    }
}
